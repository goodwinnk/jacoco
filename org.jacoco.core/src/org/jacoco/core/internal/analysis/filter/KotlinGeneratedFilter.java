/*******************************************************************************
 * Copyright (c) 2009, 2018 Mountainminds GmbH & Co. KG and Contributors
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *    Nikolay Krasko - initial API and implementation
 *
 *******************************************************************************/
package org.jacoco.core.internal.analysis.filter;

import java.util.Set;

import org.objectweb.asm.tree.AbstractInsnNode;
import org.objectweb.asm.tree.MethodNode;

/**
 * Filters Kotlin methods that have an empty line table. Such methods
 * are considered to be not explicitly present in the user code and
 * fully generated by the compiler.
 */
public class KotlinGeneratedFilter implements IFilter {
	static final String KOTLIN_METADATA_DESC = "Lkotlin/Metadata;";

	public void filter(final String className,
			final String superClassName,
			final Set<String> classAnnotations,
			final String sourceFileName,
			final MethodNode methodNode,
			final IFilterOutput output) {
		if (sourceFileName == null) {
			// Probably full debug information is missing.
			// Disable filtering as all methods might be erroneously skipped.
			return;
		}

		if (!classAnnotations.contains(KOTLIN_METADATA_DESC)) {
			return;
		}

		if (hasLineNumber(methodNode)) {
			return;
		}

		output.ignore(
				methodNode.instructions.getFirst(),
				methodNode.instructions.getLast());
	}

	private boolean hasLineNumber(MethodNode methodNode) {
		AbstractInsnNode insnNode = methodNode.instructions.getFirst();
		while (insnNode != null) {
			if (insnNode.getType() == AbstractInsnNode.LINE) {
				return true;
			}
			insnNode = insnNode.getNext();
		}

		return false;
	}
}
